// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// AdjustAlleleFreq
NumericMatrix AdjustAlleleFreq(NumericMatrix predAl, IntegerVector alleles2loc, double minfreq);
RcppExport SEXP _polyRAD_AdjustAlleleFreq(SEXP predAlSEXP, SEXP alleles2locSEXP, SEXP minfreqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type predAl(predAlSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type alleles2loc(alleles2locSEXP);
    Rcpp::traits::input_parameter< double >::type minfreq(minfreqSEXP);
    rcpp_result_gen = Rcpp::wrap(AdjustAlleleFreq(predAl, alleles2loc, minfreq));
    return rcpp_result_gen;
END_RCPP
}
// BestGenos
IntegerMatrix BestGenos(NumericVector probs, int ploidy, int ntaxa, int nalleles);
RcppExport SEXP _polyRAD_BestGenos(SEXP probsSEXP, SEXP ploidySEXP, SEXP ntaxaSEXP, SEXP nallelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type ntaxa(ntaxaSEXP);
    Rcpp::traits::input_parameter< int >::type nalleles(nallelesSEXP);
    rcpp_result_gen = Rcpp::wrap(BestGenos(probs, ploidy, ntaxa, nalleles));
    return rcpp_result_gen;
END_RCPP
}
// BestPloidies
IntegerVector BestPloidies(NumericMatrix chisq);
RcppExport SEXP _polyRAD_BestPloidies(SEXP chisqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type chisq(chisqSEXP);
    rcpp_result_gen = Rcpp::wrap(BestPloidies(chisq));
    return rcpp_result_gen;
END_RCPP
}
// ThirdDimProd
NumericMatrix ThirdDimProd(NumericVector probs, int ngen, int ntaxa);
RcppExport SEXP _polyRAD_ThirdDimProd(SEXP probsSEXP, SEXP ngenSEXP, SEXP ntaxaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type ngen(ngenSEXP);
    Rcpp::traits::input_parameter< int >::type ntaxa(ntaxaSEXP);
    rcpp_result_gen = Rcpp::wrap(ThirdDimProd(probs, ngen, ntaxa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_polyRAD_AdjustAlleleFreq", (DL_FUNC) &_polyRAD_AdjustAlleleFreq, 3},
    {"_polyRAD_BestGenos", (DL_FUNC) &_polyRAD_BestGenos, 4},
    {"_polyRAD_BestPloidies", (DL_FUNC) &_polyRAD_BestPloidies, 1},
    {"_polyRAD_ThirdDimProd", (DL_FUNC) &_polyRAD_ThirdDimProd, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_polyRAD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
